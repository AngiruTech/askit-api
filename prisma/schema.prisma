generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique 
  password String
  role Role @default(USER) 
  status Boolean @default(true) 
  course String
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  posts Post[]
  comments Comment[]

  @@map("user")
}

model Post {
  id Int @id @default(autoincrement())
  title String
  content String? 
  upvotes Int @default(0)
  downvotes Int @default(0)
  authorId Int
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  files File[]
  tags Tag[]
  comments Comment[]
  
  author  User  @relation(fields: [authorId], references: [id])
  @@map("post")
}

model File {
  id Int @id @default(autoincrement())
  title String
  path String
  postId Int
  commentId Int?
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("file")
}

model Comment {
  id Int @id @default(autoincrement())
  content String? // A person could post only an image as an answer to the question.
  category String
  upvotes Int @default(0)
  downvotes Int @default(0)
  authorId Int
  postId Int?
  parentCommentId Int?
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  files File[]
  childComments Comment[] @relation("ChildComments")

  parentComment Comment? @relation("ChildComments", fields: [parentCommentId], references: [id])
  author  User  @relation(fields: [authorId], references: [id])
  post Post? @relation(fields: [postId], references: [id])
  @@map("comment")
}

model Tag {
  id Int @id @default(autoincrement())
  category String 
  key String
  postId Int
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@map("tag")
}