generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum ReactionType {
  UPVOTE
  DOWNVOTE
}

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  name String @db.VarChar(255)
  email String @unique @db.VarChar(1000)
  password String @db.VarChar(255)
  role Role @default(USER) 
  status Boolean @default(true)

  // Relationship fields
  control UserControl? // User 1:1 UserControl
  comments Comment[] // User 1:N Comment
  posts Post[] // User 1:N Post
  reactions Reaction[] // User 1:N Reaction
  reports Report[] // User 1:N Report
  courseId Int // User N:1 Course
  course Course @relation(fields: [courseId], references: [id])
  
  @@map("user")
}

model Course {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title String @db.VarChar(255)

  //Relationship fields
  users User[] // Course 1:N User
  
  @@map("course")
}

model UserControl {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  reason String @db.VarChar(1000)

  //Relationship fields
  userId Int @unique // UserControl 1:1 User
  user User @relation(fields: [userId], references: [id])

  @@map("usercontrol")
}

model Post {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title String @db.VarChar(255)
  content String? @db.VarChar(8000)
  
  //Relationship fields
  tags Tag[] // Post N:N Tag (implicit)
  files File[] // Post 1:N Files
  comments Comment[] // Post 1:N Comment
  reactions Reaction[] // Post 1:N Reaction
  reports Report[] // Post 1:N Report
  authorId Int // Post N:1 User
  author  User  @relation(fields: [authorId], references: [id])

  @@map("post")
}

model File {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title String @db.VarChar(255)
  path String @db.VarChar(1000)

  //Relationship fields
  postId Int // File N:1 Post
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId Int? // File N:1 Comment
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("file")
}

model Comment {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  
  content String? @db.VarChar(1000) // A person could post only an image as an answer to the question.
  category String @db.VarChar(255)

  //Relationship fields
  files File[] // Comment 1:N File
  replies Comment[] @relation("Replies") //Comment 1:N Comment
  reactions Reaction[] // Comment 1:N Reaction
  reports Report[] // Comment 1:N Report
  authorId Int // Comment N:1 User
  author User @relation(fields: [authorId], references: [id])
  postId Int? // Comment N:1 Post
  post Post? @relation(fields: [postId], references: [id])
  parentCommentId Int? //Comment N:1 Comment
  parentComment Comment? @relation("Replies", fields: [parentCommentId], references: [id], onDelete: Cascade)

  @@map("comment")
}

model Tag {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  key String @db.VarChar(255)

  //Relationship fields
  posts Post[] // Tag N:N Post (implicit)
  reports Report[] // Tag N:N Report (implicit)
  categoryId Int // Tag N:1 TagCategory
  category TagCategory @relation(fields: [categoryId], references: [id])
  
  @@unique([key, categoryId])
  @@map("tag")
}

model TagCategory{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title String @db.VarChar(255) @unique

  //Relationship fields
  tags Tag[] // TagCategory 1:N Tag

  @@map("tagcategory")
}

model Reaction{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  type ReactionType

  //Relationship fields
  authorId Int // Reaction N:1 User
  author User @relation(fields: [authorId], references: [id])
  postId Int // Reaction N:1 Post
  post Post @relation(fields: [postId], references: [id])
  commentId Int? // Reaction N:1 Post
  comment Comment? @relation(fields: [commentId], references: [id])

  @@unique([authorId, commentId, postId])
  @@map("reaction")
}

model Report{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  reason String @db.VarChar(1000)

  //Relationship fields
  tags Tag[] // Report N:N Tag (implicit)
  authorId Int // Report N:1 User
  author User @relation(fields: [authorId], references: [id])
  postId Int // Report N:1 Post
  post Post @relation(fields: [postId], references: [id])
  commentId Int? // Report N:1 Post
  comment Comment? @relation(fields: [commentId], references: [id])
  @@unique([authorId, commentId, postId])
  @@map("report")
}